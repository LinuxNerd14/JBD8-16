CODE REQUIRMENTS FOR VASM:
ROMOFFSET == $8000, apply to jumps other than branches.
File must be 0x8000 in size to fill a 32Kibibyte ROM chip,
Code in the lower half of the chip is inaccesible. (0x0000 -> 417F, inclusive)
TO THE COMPUTER: The ROM starts at c180 but the ROM doesn't see A15.
TO THE ROM: The COMPUTER starts reading ROM at 0x4180.

The very beggining of code must look like:
    .org $0000
    .word $0000
    .org $4180    ; This is c180 to the cpu and where code should begin
  All this does is make sure that the inaccesible space bellow 417F is there to make the file
  big enough to fill the ROM.

The very end of the code must look like:
    .org $7ffc
    .word $c180
    .org $7ffe
    .word $FFFF
  The FFFF at the end is to pad the file to be big enough and 7ffc and 7ffd is the reset vector location
  on the ROM (The computer sees fffc and fffd)
  This makes the end of the file look like:
    00 00 00 00 80 c1 ff ff

VIA Addr Breakdown(16 total registers) see docs for operation:
  4460 == Output Register B (This is where you get data in and out of the ports)
  4461 == Output Register A 
  4462 == Data Direction for register B (0 = input, 1 = output)
  4463 == Data Direction for register A
  4464 == Timer 1 Low-Order Latches and Low-Order Counter 
  4465 == T1 High-Order Counter
  4466 == T1 Low-Order Latches
  4467 == T1 High-Order Latches
  4468 == T2 Low-Order Latches and Low-Order Counter
  4469 == T2 High-Order Counter
  446a == Shift Register
  446b == Auxiliary Control Register
  446c == Peripheral Control Register
  446d == Interrupt Flag Register
  446e == Interrupt Enable Register
  446f == Same as 4461 except for no handshake

SERIAL PORT:
UART_DATA = $4470
UART_STATUS = $4471
UART_COMMAND = $4472
UART_CONTROL = $4473
TO FIX THE HARDWARE BUG. Wait a certain time based on cpu clock speed.
X = ((1/[BAUD RATE]) * ([CPU clok in Hz]) * 10)/5.208
-----Snip-----
tx_delay:
 ldx #$ff   ; deleay determined by baud rate and cpu clok equation is below to set proper number
tx_delay_1:; ((1/[BAUD RATE]) * ([CPU clok in Hz]) * 10)/5.208 = value to load into X; be sure to round up to the nearest whole number
 dex
 bne tx_delay_1
-----Snip-----





What the Decoder needs to do:
    Send a SCMRW signal that is 0 if SCM is selected and a write is happening
    Decode address to enable parts of the computer
    Invert the R/W signal
    


Fixed table in hex, inclusive   sector size     Notes
ROM     C180 > FFFF             16000           
SCM     4480 > C17F             32000           
MISC    4474 > 447F             12              
UART    4470 > 4473             4               
VIA     4460 > 446F             16              
VERA    4440 > 445F             32              
RAND    443F                    1               
CS      443E                    1               ACTIVE HIGH
OS      0000 > 443D             17470           

In Binary
ROM     1100-0001-1000-0000  >  1111-1111-1111-1111xxxx
SCM     0100-0100-1000-0000  >  1100-0001-0111-1111xxxx
MISC    0100-0100-0111-0100  >  0100-0100-0111-1111xxxx
UART    0100-0100-0111-0000  >  0100-0100-0111-0011xxxx
VIA     0100-0100-0110-0000  >  0100-0100-0110-1111xxxx
VERA    0100-0100-0100-0000  >  0100-0100-0101-1111xxxx
RAND    0100-0100-0011-1111xxxx
CS      0100-0100-0011-1110     ACTIVE HIGHx
OS      0000-0000-0000-0000  >  0100-0100-0011-1101xx
Logic equivelence
 +      -
AND >  OR
OR  >  AND
NAND>  NOR
NOR >  NAND
XOR >  XNOR
XNOR>  XOR

FFF0
FFF1
FFF2
FFF3
FFF4
FFF5
FFF6
FFF7
FFF8
FFF9
FFFA
FFFB
FFFC
FFFD
FFFE
FFFF

